/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IDataLiquidityPool {
  export type FileResponseStruct = {
    fileId: BigNumberish;
    timestamp: BigNumberish;
    proofIndex: BigNumberish;
    rewardAmount: BigNumberish;
  };

  export type FileResponseStructOutput = [
    fileId: bigint,
    timestamp: bigint,
    proofIndex: bigint,
    rewardAmount: bigint
  ] & {
    fileId: bigint;
    timestamp: bigint;
    proofIndex: bigint;
    rewardAmount: bigint;
  };

  export type ContributorInfoResponseStruct = {
    contributorAddress: AddressLike;
    filesListCount: BigNumberish;
  };

  export type ContributorInfoResponseStructOutput = [
    contributorAddress: string,
    filesListCount: bigint
  ] & { contributorAddress: string; filesListCount: bigint };
}

export declare namespace DataLiquidityPoolImplementation {
  export type InitParamsStruct = {
    ownerAddress: AddressLike;
    tokenAddress: AddressLike;
    dataRegistryAddress: AddressLike;
    teePoolAddress: AddressLike;
    name: string;
    publicKey: string;
    proofInstruction: string;
    fileRewardFactor: BigNumberish;
  };

  export type InitParamsStructOutput = [
    ownerAddress: string,
    tokenAddress: string,
    dataRegistryAddress: string,
    teePoolAddress: string,
    name: string,
    publicKey: string,
    proofInstruction: string,
    fileRewardFactor: bigint
  ] & {
    ownerAddress: string;
    tokenAddress: string;
    dataRegistryAddress: string;
    teePoolAddress: string;
    name: string;
    publicKey: string;
    proofInstruction: string;
    fileRewardFactor: bigint;
  };
}

export interface DataLiquidityPoolImplementationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "addRewardsForContributors"
      | "contributorFiles"
      | "contributorInfo"
      | "contributors"
      | "contributorsCount"
      | "dataRegistry"
      | "fileRewardFactor"
      | "files"
      | "filesListAt"
      | "filesListCount"
      | "initialize"
      | "publicKey"
      | "multicall"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "proofInstruction"
      | "proxiableUUID"
      | "renounceOwnership"
      | "requestReward"
      | "teePool"
      | "token"
      | "totalContributorsRewardAmount"
      | "transferOwnership"
      | "unpause"
      | "updateFileRewardFactor"
      | "updateMasterKey"
      | "updateProofInstruction"
      | "updateTeePool"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FileInvalidated"
      | "FileRewardFactorUpdated"
      | "FileValidated"
      | "Initialized"
      | "MasterKeyUpdated"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "ProofInstructionUpdated"
      | "RewardRequested"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardsForContributors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorFiles",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fileRewardFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "files", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "filesListAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filesListCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [DataLiquidityPoolImplementation.InitParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "publicKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proofInstruction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "teePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalContributorsRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFileRewardFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMasterKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProofInstruction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTeePool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardsForContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorFiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fileRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filesListAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filesListCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publicKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proofInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalContributorsRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFileRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMasterKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProofInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTeePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace FileInvalidatedEvent {
  export type InputTuple = [fileId: BigNumberish];
  export type OutputTuple = [fileId: bigint];
  export interface OutputObject {
    fileId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FileRewardFactorUpdatedEvent {
  export type InputTuple = [newFileRewardFactor: BigNumberish];
  export type OutputTuple = [newFileRewardFactor: bigint];
  export interface OutputObject {
    newFileRewardFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FileValidatedEvent {
  export type InputTuple = [fileId: BigNumberish];
  export type OutputTuple = [fileId: bigint];
  export interface OutputObject {
    fileId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MasterKeyUpdatedEvent {
  export type InputTuple = [newMasterKey: string];
  export type OutputTuple = [newMasterKey: string];
  export interface OutputObject {
    newMasterKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofInstructionUpdatedEvent {
  export type InputTuple = [newProofInstruction: string];
  export type OutputTuple = [newProofInstruction: string];
  export interface OutputObject {
    newProofInstruction: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardRequestedEvent {
  export type InputTuple = [
    contributorAddress: AddressLike,
    fileId: BigNumberish,
    proofIndex: BigNumberish,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    contributorAddress: string,
    fileId: bigint,
    proofIndex: bigint,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    contributorAddress: string;
    fileId: bigint;
    proofIndex: bigint;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataLiquidityPoolImplementation extends BaseContract {
  connect(runner?: ContractRunner | null): DataLiquidityPoolImplementation;
  waitForDeployment(): Promise<this>;

  interface: DataLiquidityPoolImplementationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addRewardsForContributors: TypedContractMethod<
    [contributorsRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  contributorFiles: TypedContractMethod<
    [contributorAddress: AddressLike, index: BigNumberish],
    [IDataLiquidityPool.FileResponseStructOutput],
    "view"
  >;

  contributorInfo: TypedContractMethod<
    [contributorAddress: AddressLike],
    [IDataLiquidityPool.ContributorInfoResponseStructOutput],
    "view"
  >;

  contributors: TypedContractMethod<
    [index: BigNumberish],
    [IDataLiquidityPool.ContributorInfoResponseStructOutput],
    "view"
  >;

  contributorsCount: TypedContractMethod<[], [bigint], "view">;

  dataRegistry: TypedContractMethod<[], [string], "view">;

  fileRewardFactor: TypedContractMethod<[], [bigint], "view">;

  files: TypedContractMethod<
    [fileId: BigNumberish],
    [IDataLiquidityPool.FileResponseStructOutput],
    "view"
  >;

  filesListAt: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  filesListCount: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [params: DataLiquidityPoolImplementation.InitParamsStruct],
    [void],
    "nonpayable"
  >;

  publicKey: TypedContractMethod<[], [string], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proofInstruction: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestReward: TypedContractMethod<
    [fileId: BigNumberish, proofIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  teePool: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  totalContributorsRewardAmount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateFileRewardFactor: TypedContractMethod<
    [newFileRewardFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMasterKey: TypedContractMethod<
    [newMasterKey: string],
    [void],
    "nonpayable"
  >;

  updateProofInstruction: TypedContractMethod<
    [newProofInstruction: string],
    [void],
    "nonpayable"
  >;

  updateTeePool: TypedContractMethod<
    [newTeePool: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRewardsForContributors"
  ): TypedContractMethod<
    [contributorsRewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contributorFiles"
  ): TypedContractMethod<
    [contributorAddress: AddressLike, index: BigNumberish],
    [IDataLiquidityPool.FileResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributorInfo"
  ): TypedContractMethod<
    [contributorAddress: AddressLike],
    [IDataLiquidityPool.ContributorInfoResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributors"
  ): TypedContractMethod<
    [index: BigNumberish],
    [IDataLiquidityPool.ContributorInfoResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dataRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fileRewardFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "files"
  ): TypedContractMethod<
    [fileId: BigNumberish],
    [IDataLiquidityPool.FileResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "filesListAt"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "filesListCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [params: DataLiquidityPoolImplementation.InitParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "publicKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proofInstruction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestReward"
  ): TypedContractMethod<
    [fileId: BigNumberish, proofIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "teePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalContributorsRewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFileRewardFactor"
  ): TypedContractMethod<
    [newFileRewardFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMasterKey"
  ): TypedContractMethod<[newMasterKey: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProofInstruction"
  ): TypedContractMethod<[newProofInstruction: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTeePool"
  ): TypedContractMethod<[newTeePool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "FileInvalidated"
  ): TypedContractEvent<
    FileInvalidatedEvent.InputTuple,
    FileInvalidatedEvent.OutputTuple,
    FileInvalidatedEvent.OutputObject
  >;
  getEvent(
    key: "FileRewardFactorUpdated"
  ): TypedContractEvent<
    FileRewardFactorUpdatedEvent.InputTuple,
    FileRewardFactorUpdatedEvent.OutputTuple,
    FileRewardFactorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FileValidated"
  ): TypedContractEvent<
    FileValidatedEvent.InputTuple,
    FileValidatedEvent.OutputTuple,
    FileValidatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MasterKeyUpdated"
  ): TypedContractEvent<
    MasterKeyUpdatedEvent.InputTuple,
    MasterKeyUpdatedEvent.OutputTuple,
    MasterKeyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProofInstructionUpdated"
  ): TypedContractEvent<
    ProofInstructionUpdatedEvent.InputTuple,
    ProofInstructionUpdatedEvent.OutputTuple,
    ProofInstructionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardRequested"
  ): TypedContractEvent<
    RewardRequestedEvent.InputTuple,
    RewardRequestedEvent.OutputTuple,
    RewardRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "FileInvalidated(uint256)": TypedContractEvent<
      FileInvalidatedEvent.InputTuple,
      FileInvalidatedEvent.OutputTuple,
      FileInvalidatedEvent.OutputObject
    >;
    FileInvalidated: TypedContractEvent<
      FileInvalidatedEvent.InputTuple,
      FileInvalidatedEvent.OutputTuple,
      FileInvalidatedEvent.OutputObject
    >;

    "FileRewardFactorUpdated(uint256)": TypedContractEvent<
      FileRewardFactorUpdatedEvent.InputTuple,
      FileRewardFactorUpdatedEvent.OutputTuple,
      FileRewardFactorUpdatedEvent.OutputObject
    >;
    FileRewardFactorUpdated: TypedContractEvent<
      FileRewardFactorUpdatedEvent.InputTuple,
      FileRewardFactorUpdatedEvent.OutputTuple,
      FileRewardFactorUpdatedEvent.OutputObject
    >;

    "FileValidated(uint256)": TypedContractEvent<
      FileValidatedEvent.InputTuple,
      FileValidatedEvent.OutputTuple,
      FileValidatedEvent.OutputObject
    >;
    FileValidated: TypedContractEvent<
      FileValidatedEvent.InputTuple,
      FileValidatedEvent.OutputTuple,
      FileValidatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MasterKeyUpdated(string)": TypedContractEvent<
      MasterKeyUpdatedEvent.InputTuple,
      MasterKeyUpdatedEvent.OutputTuple,
      MasterKeyUpdatedEvent.OutputObject
    >;
    MasterKeyUpdated: TypedContractEvent<
      MasterKeyUpdatedEvent.InputTuple,
      MasterKeyUpdatedEvent.OutputTuple,
      MasterKeyUpdatedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProofInstructionUpdated(string)": TypedContractEvent<
      ProofInstructionUpdatedEvent.InputTuple,
      ProofInstructionUpdatedEvent.OutputTuple,
      ProofInstructionUpdatedEvent.OutputObject
    >;
    ProofInstructionUpdated: TypedContractEvent<
      ProofInstructionUpdatedEvent.InputTuple,
      ProofInstructionUpdatedEvent.OutputTuple,
      ProofInstructionUpdatedEvent.OutputObject
    >;

    "RewardRequested(address,uint256,uint256,uint256)": TypedContractEvent<
      RewardRequestedEvent.InputTuple,
      RewardRequestedEvent.OutputTuple,
      RewardRequestedEvent.OutputObject
    >;
    RewardRequested: TypedContractEvent<
      RewardRequestedEvent.InputTuple,
      RewardRequestedEvent.OutputTuple,
      RewardRequestedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
